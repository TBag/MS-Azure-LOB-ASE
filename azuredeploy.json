{
  "$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "aseName": {
      "type": "string",
      "defaultValue": "dev-eshop",
      "metadata": {
        "description": "Name of the App Service Environment"
      }
    },
    "aseLocation": {
      "type": "string",
      "allowedValues": [
        "Central US",
        "East US",
        "East US 2",
        "North Central US",
        "South Central US",
        "West US",
        "Canada Central",
        "North Europe",
        "West Europe",
        "East Asia",
        "Southeast Asia",
        "Japan East",
        "Japan West",
        "Brazil South",
        "Australia East",
        "Australia Southeast",
        "West India",
        "Central India",
        "South India"
      ],
      "defaultValue": "West US",
      "metadata": {
        "description": "Location of the App Service Environment"
      }
    },
    "sqlServerAdministratorLogin": {
      "type": "string",
      "defaultValue": "eshop-admin"
    },
    "sqlServerAdministratorLoginPassword": {
      "type": "securestring"
    },
    "azureAdDomain": {
      "type": "string",
      "defaultValue": "cand3.onmicrosoft.com"
    },
    "azureAdTenantId": {
      "type": "string",
      "defaultValue": "0534985e-032e-430a-9b95-60f5277b96f4"
    },
    "azureAdClientId": {
      "type": "string",
      "defaultValue": "21712378-0a01-4d49-98fd-fcd74526238b"
    },
    "sourceCodeRepositoryURL": {
      "type": "string",
      "defaultValue": "https://github.com/TylerLu/MS-Azure-LOB-ASE",
      "metadata": {
        "description": "Source code repository URL"
      }
    },
    "sourceCodeBranch": {
      "type": "string",
      "defaultValue": "master",
      "metadata": {
        "description": "Sourcecode Repo branch"
      }
    },
    "sourceCodeManualIntegration": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Use 'true' if you are deploying from the base repo, 'false' if you are deploying from your own fork. If you're using 'false', make sure you have admin permissions to the repo. If you get an error, you should add GitHub integration to another web app manually, so that you get a GitHub access token associated with your Azure Subscription."
      }
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",
    "vnetName": "[concat(parameters('aseName'), '-vnet')]",
    "eshopSubnetName": "eshop-subnet",
    "agSubnetName": "app-gateway-subnet",
    "subnetRouteTableName": "[concat(parameters('aseName'), '-route-table')]",
    "subnetNSGName": "[concat(parameters('aseName'), '-nsg')]",
    "aspName": "[concat(parameters('aseName'), '-asp')]",
    "webAppName": "[concat(parameters('aseName'), '-web')]",
    "apiAppName": "[concat(parameters('aseName'), '-api')]",
    "adminAppName": "[concat(parameters('aseName'), '-admin')]",
    "appInsightsName": "[concat(parameters('aseName'), '-app-insights')]",
    "sqlServerName": "[concat(parameters('aseName'), '-sql-server')]",
    "storageAccountName": "[concat(replace(parameters('aseName'), '-', ''), 'storage')]",
    "redisCacheName": "[concat(parameters('aseName'), '-cache')]",
    "redisCacheSubnetName": "redis-cache-subnet",
    "appGatewayName": "[concat(parameters('aseName'), '-waf')]",
    "appGatewayID": "[resourceId('Microsoft.Network/applicationGateways', variables('appGatewayName'))]",
    "appGatewayPublicIPName": "[concat(parameters('aseName'), '-waf-ip')]",
    "appGatewayPublicIPDnsPrefix": "[concat(parameters('aseName'), '-waf')]",
    "cdnName": "[concat(parameters('aseName'), '-cdn')]",
    "cdnWebAppEndpointName": "[concat(parameters('aseName'), '-cdn-web')]",
    "cdnStorageEndpointName": "[concat(parameters('aseName'), '-cdn-storage')]"
  },
  "resources": [
    {
      "apiVersion": "2015-08-01",
      "type": "Microsoft.Web/hostingEnvironments",
      "name": "[parameters('aseName')]",
      "location": "[parameters('aseLocation')]",
      "kind": "ASEV2",
      "properties": {
        "name": "[parameters('aseName')]",
        "location": "[parameters('aseLocation')]",
        "virtualNetwork": {
          "Id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
          "Subnet": "[variables('eshopSubnetName')]"
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]"
      ]
    },
    {
      "apiVersion": "2016-12-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vnetName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('subnetNSGName'))]",
        "[concat('Microsoft.Network/routeTables/', variables('subnetRouteTableName'))]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "[variables('agSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.0.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('subnetNSGName'))]"
              },
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', variables('subnetRouteTableName'))]"
              }
            }
          },
          {
            "name": "[variables('eshopSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.1.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('subnetNSGName'))]"
              },
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', variables('subnetRouteTableName'))]"
              },
              "serviceEndpoints": [
                {
                  "service": "Microsoft.Sql",
                  "locations": [
                    "[variables('location')]"
                  ]
                },
                {
                  "service": "Microsoft.Storage",
                  "locations": [
                    "[variables('location')]"
                  ]
                }
              ]
            }
          },
          {
            "name": "[variables('redisCacheSubnetName')]",
            "properties": {
              "addressPrefix": "10.0.2.0/24",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('subnetNSGName'))]"
              },
              "routeTable": {
                "id": "[resourceId('Microsoft.Network/routeTables', variables('subnetRouteTableName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/routeTables",
      "name": "[variables('subnetRouteTableName')]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "UDR - Subnet"
      },
      "properties": {
        "routes": [
          {
            "name": "[concat(parameters('aseName'), '-route')]",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "Internet"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('subnetNSGName')]",
      "location": "[variables('location')]",
      "tags": {
        "displayName": "NSG - Subnet"
      },
      "properties": {
        "securityRules": [
          {
            "name": "Inbound-management",
            "properties": {
              "description": "Used to manage ASE from public VIP",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "454-455",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "ASE-internal-inbound",
            "properties": {
              "description": "ASE-internal-inbound",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "192.168.250.0/24",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 110,
              "direction": "Inbound"
            }
          },
          {
            "name": "Inbound-HTTP",
            "properties": {
              "description": "Allow HTTP",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 120,
              "direction": "Inbound"
            }
          },
          {
            "name": "Inbount-HTTPS",
            "properties": {
              "description": "Allow HTTPS",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 130,
              "direction": "Inbound"
            }
          },
          {
            "name": "Inbound-FTP",
            "properties": {
              "description": "Allow FTP over port 21",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "21",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 140,
              "direction": "Inbound"
            }
          },
          {
            "name": "Inbound-FTPS",
            "properties": {
              "description": "Allow FTPS",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "990",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 150,
              "direction": "Inbound"
            }
          },
          {
            "name": "Inbound-FTP-Data",
            "properties": {
              "description": "RDP",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "10001-10020",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 160,
              "direction": "Inbound"
            }
          },
          {
            "name": "Inbound-Remote-Debugging",
            "properties": {
              "description": "Visual Studio remote debugging",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "4016-4022",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 170,
              "direction": "Inbound"
            }
          },
          {
            "name": "Outbound-443",
            "properties": {
              "description": "Azure Storage blob",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Outbound"
            }
          },
          {
            "name": "Outbound-SMB",
            "properties": {
              "description": "Azure Storage queue",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "445",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 110,
              "direction": "Outbound"
            }
          },
          {
            "name": "Outbound-DB",
            "properties": {
              "description": "Database",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "1433",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 120,
              "direction": "Outbound"
            }
          },
          {
            "name": "Outbound-DB2",
            "properties": {
              "description": "Database 2",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "11000-11999",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 130,
              "direction": "Outbound"
            }
          },
          {
            "name": "Outbound-DB3",
            "properties": {
              "description": "Database 3",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "14000-14999",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 140,
              "direction": "Outbound"
            }
          },
          {
            "name": "Outbound-DNS",
            "properties": {
              "description": "DNS",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "53",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 150,
              "direction": "Outbound"
            }
          },
          {
            "name": "ASE-internal-outbound",
            "properties": {
              "description": "Azure Storage queue",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "192.168.250.0/24",
              "access": "Allow",
              "priority": 160,
              "direction": "Outbound"
            }
          },
          {
            "name": "Outbound-80",
            "properties": {
              "description": "Outbound 80",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 170,
              "direction": "Outbound"
            }
          },
          {
            "name": "ASE-to-VNET",
            "properties": {
              "description": "ASE to VNET",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "192.168.250.0/23",
              "access": "Allow",
              "priority": 180,
              "direction": "Outbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-03-01",
      "type": "Microsoft.Web/serverfarms",
      "name": "[variables('aspName')]",
      "location": "[parameters('aseLocation')]",
      "kind": "app",
      "properties": {
        "name": "[variables('aspName')]",
        "workerSize": "0",
        "workerSizeId": "0",
        "numberOfWorkers": "1",
        "reserved": false,
        "hostingEnvironment": "[parameters('aseName')]"
      },
      "sku": {
        "tier": "Isolated",
        "name": "I1"
      },
      "dependsOn": [
        "[concat('Microsoft.Web/hostingEnvironments/', parameters('aseName'))]"
      ]
    },
    {
      "apiVersion": "2015-05-01",
      "type": "microsoft.insights/components",
      "name": "[variables('appInsightsName')]",
      "location": "East US",
      "properties": {
        "ApplicationId": "[variables('appInsightsName')]",
        "Request_Source": "IbizaWebAppExtensionCreate"
      }
    },
    {
      "apiVersion": "2016-03-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('webAppName')]",
      "location": "[variables('location')]",
      "properties": {
        "name": "[variables('webAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms/', variables('aspName'))]",
        "hostingEnvironment": "[parameters('aseName')]",
        "siteConfig": {
          "alwaysOn": true,
          "appSettings": [
            {
              "name": "ODataServiceBaseUrl",
              "value": "[concat('http://', reference(resourceId('Microsoft.Web/sites/', variables('apiAppName'))).defaultHostName)]"
            },
            {
              "name": "cdn:url",
              "value": "[concat('http://', variables('cdnWebAppEndpointName'), '.azureedge.net')]"
            },
            {
              "name": "CatalogBaseUrl",
              "value": "[concat('http://', variables('cdnStorageEndpointName'), '.azureedge.net')]"
            },
            {
              "name": "ApplicationInsights:InstrumentationKey",
              "value": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "project",
              "value": "src/Web/Web.csproj"
            }
          ],
          "connectionstrings": [
            {
              "name": "CatalogConnection",
              "type": "SQLAzure",
              "connectionString": "[concat('Server=tcp:', variables('sqlServerName'), '.database.windows.net,1433;Initial Catalog=Catalog;Persist Security Info=False;User ID=', parameters('sqlServerAdministratorLogin'), ';Password=', parameters('sqlServerAdministratorLoginPassword'), ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
            },
            {
              "name": "SalesConnection",
              "type": "SQLAzure",
              "connectionString": "[concat('Server=tcp:', variables('sqlServerName'), '.database.windows.net,1433;Initial Catalog=Sales;Persist Security Info=False;User ID=', parameters('sqlServerAdministratorLogin'), ';Password=', parameters('sqlServerAdministratorLoginPassword'), ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
            },
            {
              "name": "IdentityConnection",
              "type": "SQLAzure",
              "connectionString": "[concat('Server=tcp:', variables('sqlServerName'), '.database.windows.net,1433;Initial Catalog=Identity;Persist Security Info=False;User ID=', parameters('sqlServerAdministratorLogin'), ';Password=', parameters('sqlServerAdministratorLoginPassword'), ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
            },
            {
              "name": "StorageConnection",
              "type": "Custom",
              "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountName'),';AccountKey=',listkeys(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2015-05-01-preview').key1,';')]"
            },
            {
              "name": "RedisConnection",
              "type": "Custom",
              "connectionString": "[concat(variables('redisCacheName'), '.redis.cache.windows.net:6380,password=', listKeys(resourceId('Microsoft.Cache/Redis/', variables('redisCacheName')), '2016-04-01').primaryKey, ',ssl=True,abortConnect=False')]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "properties": {
            "RepoUrl": "[parameters('sourceCodeRepositoryURL')]",
            "branch": "[parameters('sourceCodeBranch')]",
            "IsManualIntegration": "parameters('sourceCodeManualIntegration')]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/', variables('webAppName'))]"
          ]
        }
      ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('aspName'))]",
        "[resourceId('microsoft.insights/components/', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Cache/Redis/', variables('redisCacheName'))]",
        "[resourceId('Microsoft.Web/sites/', variables('apiAppName'))]"
      ]
    },
    {
      "apiVersion": "2016-03-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('apiAppName')]",
      "location": "[variables('location')]",
      "properties": {
        "name": "[variables('apiAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms/', variables('aspName'))]",
        "hostingEnvironment": "[parameters('aseName')]",
        "siteConfig": {
          "alwaysOn": true,
          "appSettings": [
            {
              "name": "ApplicationInsights:InstrumentationKey",
              "value": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "project",
              "value": "src/API/API.csproj"
            }
          ],
          "connectionstrings": [
            {
              "name": "SalesConnection",
              "type": "SQLAzure",
              "connectionString": "[concat('Server=tcp:', variables('sqlServerName'), '.database.windows.net,1433;Initial Catalog=Sales;Persist Security Info=False;User ID=', parameters('sqlServerAdministratorLogin'), ';Password=', parameters('sqlServerAdministratorLoginPassword'), ';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "properties": {
            "RepoUrl": "[parameters('sourceCodeRepositoryURL')]",
            "branch": "[parameters('sourceCodeBranch')]",
            "IsManualIntegration": "parameters('sourceCodeManualIntegration')]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/', variables('apiAppName'))]"
          ]
        }
      ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('aspName'))]",
        "[resourceId('microsoft.insights/components/', variables('appInsightsName'))]"
      ]
    },
    {
      "apiVersion": "2016-03-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('adminAppName')]",
      "location": "[variables('location')]",
      "properties": {
        "name": "[variables('adminAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms/', variables('aspName'))]",
        "hostingEnvironment": "[parameters('aseName')]",
        "siteConfig": {
          "alwaysOn": true,
          "appSettings": [
            {
              "name": "AzureAd:Domain",
              "value": "[parameters('azureAdDomain')]"
            },
            {
              "name": "AzureAd:TenantId",
              "value": "[parameters('azureAdTenantId')]"
            },
            {
              "name": "AzureAd:ClientId",
              "value": "[parameters('azureAdClientId')]"
            },
            {
              "name": "ODataServiceBaseUrl",
              "value": "[concat('http://', reference(resourceId('Microsoft.Web/sites/', variables('apiAppName'))).defaultHostName)]"
            },
            {
              "name": "ApplicationInsights:InstrumentationKey",
              "value": "[reference(resourceId('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "project",
              "value": "src/Admin/Admin.csproj"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "properties": {
            "RepoUrl": "[parameters('sourceCodeRepositoryURL')]",
            "branch": "[parameters('sourceCodeBranch')]",
            "IsManualIntegration": "parameters('sourceCodeManualIntegration')]"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/', variables('adminAppName'))]"
          ]
        }
      ],
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms/', variables('aspName'))]",
        "[resourceId('microsoft.insights/components/', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Web/sites/', variables('apiAppName'))]"
      ]
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Sql/servers",
      "location": "[variables('location')]",
      "name": "[variables('sqlServerName')]",
      "properties": {
        "administratorLogin": "[parameters('sqlServerAdministratorLogin')]",
        "administratorLoginPassword": "[parameters('sqlServerAdministratorLoginPassword')]",
        "version": "12.0"
      },
      "resources": [
        {
          "apiVersion": "2014-04-01-preview",
          "type": "databases",
          "location": "[variables('location')]",
          "name": "Catalog",
          "properties": {
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "edition": "Basic",
            "maxSizeBytes": "104857600",
            "zoneRedundant": false
          },
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqlServerName'))]"
          ]
        },
        {
          "apiVersion": "2014-04-01-preview",
          "type": "databases",
          "location": "[variables('location')]",
          "name": "Sales",
          "properties": {
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "edition": "Basic",
            "maxSizeBytes": "104857600",
            "zoneRedundant": false
          },
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqlServerName'))]"
          ]
        },
        {
          "apiVersion": "2014-04-01-preview",
          "type": "databases",
          "location": "[variables('location')]",
          "name": "Identity",
          "properties": {
            "collation": "SQL_Latin1_General_CP1_CI_AS",
            "edition": "Basic",
            "maxSizeBytes": "104857600",
            "zoneRedundant": false
          },
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqlServerName'))]"
          ]
        },
        {
          "apiVersion": "2014-04-01-preview",
          "type": "firewallrules",
          "location": "[variables('location')]",
          "name": "AllowAllWindowsAzureIps",
          "properties": {
            "endIpAddress": "0.0.0.0",
            "startIpAddress": "0.0.0.0"
          },
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqlServerName'))]"
          ]
        },
        {
          "apiVersion": "2015-05-01-preview",
          "type": "virtualNetworkRules",
          "name": "[concat('allow-access-from-', variables('eshopSubnetName'))]",
          "scale": null,
          "properties": {
            "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('eshopSubnetName'))]"
          },
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqlServerName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
          ]
        }
      ]
    },
    {
      "apiVersion": "2017-10-01",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard_RAGRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": false,
        "accessTier": "Hot",
        "encryption": {
          "services": {
            "blob": {
              "enabled": true
            },
            "file": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      },
      "dependsOn": []
    },
    {
      "apiVersion": "2017-10-01",
      "type": "Microsoft.Cache/Redis",
      "name": "[variables('redisCacheName')]",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "name": "Premium",
          "family": "P",
          "capacity": 1
        },
        "subnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('redisCacheSubnetName'))]",
        "staticIP": "10.0.2.128",
        "redisConfiguration": {},
        "enableNonSslPort": true
      }
    },
    {
      "apiVersion": "2017-10-01",
      "type": "Microsoft.Network/applicationGateways",
      "name": "[variables('appGatewayName')]",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "name": "WAF_Medium",
          "tier": "WAF",
          "capacity": "1"
        },
        "gatewayIPConfigurations": [
          {
            "name": "appGatewayIpConfig",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('agSubnetName'))]"
              }
            }
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "appGatewayFrontendIP",
            "properties": {
              "PublicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses/', variables('appGatewayPublicIPName'))]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "appGatewayFrontendPort",
            "properties": {
              "Port": 80
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "appGatewayBackendPool",
            "properties": {
              "BackendAddresses": [
                {
                  "fqdn": "[concat(variables('webAppName'), '.', parameters('aseName'), '.p.azurewebsites.net')]"
                }
              ]
            }
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "appGatewayBackendHttpSettings",
            "properties": {
              "Port": 80,
              "Protocol": "Http",
              "CookieBasedAffinity": "Disabled",
              "PickHostNameFromBackendAddress": true,
              "probe": {
                "id": "[concat(variables('appGatewayID'), '/probes/webappprobe')]"
              }
            }
          }
        ],
        "httpListeners": [
          {
            "name": "appGatewayHttpListener",
            "properties": {
              "FrontendIPConfiguration": {
                "Id": "[concat(variables('appGatewayID'), '/frontendIPConfigurations/appGatewayFrontendIP')]"
              },
              "FrontendPort": {
                "Id": "[concat(variables('appGatewayID'), '/frontendPorts/appGatewayFrontendPort')]"
              },
              "Protocol": "Http",
              "SslCertificate": null
            }
          }
        ],
        "requestRoutingRules": [
          {
            "Name": "rule1",
            "properties": {
              "RuleType": "Basic",
              "httpListener": {
                "id": "[concat(variables('appGatewayID'), '/httpListeners/appGatewayHttpListener')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('appGatewayID'), '/backendAddressPools/appGatewayBackendPool')]"
              },
              "backendHttpSettings": {
                "id": "[concat(variables('appGatewayID'), '/backendHttpSettingsCollection/appGatewayBackendHttpSettings')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "webappprobe",
            "properties": {
              "protocol": "Http",
              "path": "/",
              "interval": 30,
              "timeout": 120,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": true
            }
          }
        ],
        "sslCertificates": [],
        "webApplicationFirewallConfiguration": {
          "enabled": true,
          "firewallMode": "Prevention",
          "ruleSetType": "OWASP",
          "ruleSetVersion": "3.0"
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
        "[concat('Microsoft.Network/publicIPAddresses/', variables('appGatewayPublicIPName'))]"
      ]
    },
    {
      "apiVersion": "2017-08-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('appGatewayPublicIPName')]",
      "location": "[variables('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('appGatewayPublicIPDnsPrefix')]"
        }
      }
    },
    {
      "apiVersion": "2017-10-12",
      "type": "microsoft.cdn/profiles",
      "name": "[variables('cdnName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "standard_verizon"
      },
      "resources": [
        {
          "apiVersion": "2017-10-12",
          "type": "endpoints",
          "name": "[variables('cdnWebAppEndpointName')]",
          "location": "[variables('location')]",
          "properties": {
            "isHttpAllowed": true,
            "isHttpsAllowed": true,
            "origins": [
              {
                "name": "WebApp",
                "properties": {
                  "hostName": "[reference(resourceId('Microsoft.Web/sites/', variables('webAppName'))).defaultHostName]"
                }
              }
            ],
            "isCompressionEnabled": true,
            "contentTypesToCompress": [
              "text/plain",
              "text/html",
              "text/css",
              "text/javascript",
              "application/x-javascript",
              "application/javascript",
              "application/json",
              "application/xml"
            ],
            "optimizationType": "GeneralWebDelivery",
            "probePath": null,
            "originHostHeader": "[reference(resourceId('Microsoft.Web/sites/', variables('webAppName'))).defaultHostName]"
          },
          "dependsOn": [
            "[resourceId('microsoft.cdn/profiles/', variables('cdnName'))]",
            "[resourceId('Microsoft.Web/sites/sourcecontrols/', variables('webAppName'), 'web')]"
          ]
        },
        {
          "apiVersion": "2017-10-12",
          "type": "endpoints",
          "name": "[variables('cdnStorageEndpointName')]",
          "location": "[variables('location')]",
          "properties": {
            "isHttpAllowed": true,
            "isHttpsAllowed": true,
            "origins": [
              {
                "name": "Storage",
                "properties": {
                  "hostName": "[concat(variables('storageAccountName'), '.blob.core.windows.net')]"
                }
              }
            ],
            "isCompressionEnabled": true,
            "contentTypesToCompress": [
              "text/plain",
              "text/html",
              "text/css",
              "text/javascript",
              "application/x-javascript",
              "application/javascript",
              "application/json",
              "application/xml"
            ],
            "optimizationType": "GeneralWebDelivery",
            "probePath": null,
            "originHostHeader": "[concat(variables('storageAccountName'), '.blob.core.windows.net')]"
          },
          "dependsOn": [
            "[resourceId('microsoft.cdn/profiles/', variables('cdnName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
          ]
        }
      ]
    }
  ],
  "outputs": {
    "applicationGatewayURL": {
      "type": "string",
      "value": "[concat('http://', reference(variables('appGatewayPublicIPName')).dnsSettings.fqdn, '/')]"
    }
  }
}